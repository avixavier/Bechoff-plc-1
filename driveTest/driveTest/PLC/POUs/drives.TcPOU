<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="drives" Id="{dede6169-9d00-441b-82ba-083c9992ede6}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM drives
VAR
	//Small Drive
	aSmallDrive					: AXIS_REF; //initilization of asmallDrive axis
	MC_Power_aSmallDrive		: MC_Power; // linking to the FB
	MC_JOG_aSmallDrive			: MC_Jog;   //linking to the FB
	
	//LargeDrive
	alargeDrive					: AXIS_REF;	
	MC_Power_aLargeDrive		: MC_Power;
	MC_JOG_aLargeDrive			: MC_Jog;
	
	Read_Actual_position		: MC_ReadActualPosition;
	ActualPositionArrayLargeDrive 		: ARRAY [1..10] OF REAL;
	ActualPositionArraysmallDrive 		: ARRAY [1..10] OF REAL;
	Reset_largeDrive			: MC_Reset;
	Reset_smallDrive			: MC_Reset;
	
	Index 						: INT:=1; //Index of an array
	PositionlargeDrive					: REAL;	  //positoin variable initialisation
	PositionSmallDrive			:REAL;
    TIMER						: TON;    //FB link of TON
	
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//conditional statement for switching the RGB, Red for Emergency Stop , Green for motor 1 and Orange for motor2
IF NOT cabinet.emergencysw THEN
	Reset_largeDrive.Execute 			:= FALSE;
	Reset_smallDrive.Execute			:= FALSE;
    cabinet.redlight    				:= TRUE;
    cabinet.greenlight  				:= FALSE;
    cabinet.orangelight 				:= FALSE;
ELSIF cabinet.emergencysw AND cabinet.selector1 THEN
	Reset_smallDrive.Execute			:= TRUE;
    cabinet.redlight    				:= FALSE;
    cabinet.greenlight  				:= TRUE;
    cabinet.orangelight 				:= FALSE;   
ELSIF cabinet.emergencysw AND cabinet.selector2 THEN 
	Reset_largeDrive.Execute			:= TRUE;
    cabinet.redlight   					:= FALSE;
    cabinet.greenlight  				:= FALSE;
    cabinet.orangelight 				:= TRUE; 
END_IF

//Emergency switch to stop the motors
IF cabinet.emergencysw THEN
    drives.MC_Power_aSmallDrive.Enable := TRUE;
	drives.MC_Power_aLargeDrive.Enable := TRUE;
ELSE	
	drives.MC_Power_aSmallDrive.Enable := FALSE;
	drives.MC_Power_aLargeDrive.Enable := FALSE;
END_IF


//Selector conditonal statement
IF cabinet.selector1 THEN
	
	driveController.smallDrive.xForward := cabinet.motor1fwd;
	driveController.smallDrive.xReverse := cabinet.motor1rev;
ELSE
	driveController.largeDrive.xForward := cabinet.motor2fwd;
	driveController.largeDrive.xReverse := cabinet.motor2rev;	
END_IF

//FB to read the positon of the large servo motor
Read_Actual_position(
	Axis								:= alargeDrive, 
	Enable								:= TRUE , 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Position							 => driveController.largeDrive.actualposition);
	
	
	
//Fb to reset the large servo motor
Reset_largeDrive(
	Axis								:= alargeDrive, 
	Execute								:=  , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

//FB to reset the small servo motor
Reset_smallDrive(
	Axis								:=aSmallDrive , 
	Execute								:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );


//small motor power and jog
MC_Power_aSmallDrive(
		Axis							:= aSmallDrive, 
		Enable							:= , 
		Enable_Positive					:= TRUE, 
		Enable_Negative					:= TRUE, 
		Override						:= 100, 
		BufferMode						:= , 
		Options							:= , 
		Status							=> , 
		Busy							=> , 
		Active							=> , 
		Error							=> , 
		ErrorID							=> );
	
MC_JOG_aSmallDrive(
		Axis							:= aSmallDrive, 
		JogForward						:= driveController.smallDrive.xForward, 
		JogBackwards					:= driveController.smallDrive.xReverse, 
		Mode							:= E_JogMode.MC_JOGMODE_CONTINOUS,
		//Position:= , 
		Velocity						:= 500, 
		Acceleration					:= 15000, 
		Deceleration					:= 15000, 
		Jerk							:= 15000, 
		Done							=> , 
		Busy							=> , 
		Active							=> , 
		CommandAborted					=> , 
		Error							=> , 
		ErrorID							=> );
	


//large drive Power and jog
MC_Power_aLargeDrive(
		Axis							:=alargeDrive , 
		Enable							:= , 
		Enable_Positive					:=TRUE , 
		Enable_Negative					:=TRUE , 
		Override						:=100 , 
		BufferMode						:= , 
		Options							:= , 
		Status							=> , 
		Busy							=> , 
		Active							=> , 
		Error							=> , 
		ErrorID							=> );
		
	MC_JOG_aLargeDrive(
		Axis							:= alargeDrive, 
		JogForward						:= driveController.largeDrive.xForward, 
		JogBackwards					:= driveController.largeDrive.xReverse, 
		Mode							:= E_JogMode.MC_JOGMODE_CONTINOUS,
		//Position:= , 
		Velocity						:= 100, 
		Acceleration					:= 1000, 
		Deceleration					:= 1000, 
		Jerk							:= 1000, 
		Done							=> , 
		Busy							=> , 
		Active							=> , 
		CommandAborted					=> , 
		Error							=> , 
		ErrorID							=> );

		
//Timed storing of actual posiotn of Large servo motor

TIMER(IN:= , PT:= T#1S , Q=> , ET=>  );		
IF driveController.largeDrive.xForward OR driveController.largeDrive.xReverse OR driveController.smallDrive.xForward OR driveController.smallDrive.xReverse THEN
	TIMER(IN := TRUE);
END_IF

IF TIMER.Q THEN
    PositionlargeDrive := driveController.largeDrive.actualposition;
	PositionSmallDrive := driveController.smallDrive.actualposition;
    ActualPositionArrayLargeDrive[Index] := PositionlargeDrive;
	ActualPositionArraysmallDrive[Index] := PositionSmallDrive;
	
    Index := Index + 1;
	Timer(IN := FALSE);
	
	
	IF Index > 100000 THEN
        Timer(IN := FALSE);  (* Stop the timer when 100000  values are stored *)
    END_IF
	
END_IF
	]]></ST>
    </Implementation>
    <LineIds Name="drives">
      <LineId Id="264" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="282" Count="3" />
      <LineId Id="398" Count="0" />
      <LineId Id="286" Count="3" />
      <LineId Id="379" Count="0" />
      <LineId Id="290" Count="3" />
      <LineId Id="218" Count="1" />
      <LineId Id="201" Count="2" />
      <LineId Id="205" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="209" Count="4" />
      <LineId Id="204" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="334" Count="6" />
      <LineId Id="324" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="365" Count="1" />
      <LineId Id="221" Count="0" />
      <LineId Id="368" Count="5" />
      <LineId Id="361" Count="2" />
      <LineId Id="389" Count="5" />
      <LineId Id="381" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="156" Count="28" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="69" Count="11" />
      <LineId Id="55" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="99" Count="13" />
      <LineId Id="82" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="510" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="422" Count="2" />
      <LineId Id="517" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="463" Count="1" />
      <LineId Id="452" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="461" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>